configuration {} enumerations {'We', 'Ea', 'No', 'So', 'XX'}
constants {min_val := 0, max_val := 9, number_of_obstacles := 22, max_obstacle_size := 1}
variables {
    variable { bl act VAR {'We', 'Ea', 'No', 'So', 'XX'} assign{result{'XX'}}}
    variable { bl new VAR BOOLEAN assign{result{False}}}
    variable { env x_d VAR [min_val, max_val] assign{result{min_val}}}
    variable { env y_d VAR [min_val, max_val] assign{result{min_val}}}
    variable { env x_g VAR [min_val, max_val] assign{result{x_d}}}
    variable { env y_g VAR [min_val, max_val] assign{result{y_d}}}
    variable { env net NEURAL classification {'We', 'Ea', 'No', 'So', 'XX'} inputs {x_d, y_d, x_g, y_g}
	config{table}
	source {
	    './networks/1000__1000_1.onnx'
	}
    }
    variable { env obstacles DEFINE INT static array (mult, number_of_obstacles, 2) iterative_assign, index_var
	condition {(eq, index_var, 0)} assign{result{9}}condition {(eq, index_var, 1)} assign{result{2}}
condition {(eq, index_var, 2)} assign{result{9}}condition {(eq, index_var, 3)} assign{result{0}}
condition {(eq, index_var, 4)} assign{result{8}}condition {(eq, index_var, 5)} assign{result{9}}
condition {(eq, index_var, 6)} assign{result{8}}condition {(eq, index_var, 7)} assign{result{0}}
condition {(eq, index_var, 8)} assign{result{7}}condition {(eq, index_var, 9)} assign{result{6}}
condition {(eq, index_var, 10)} assign{result{6}}condition {(eq, index_var, 11)} assign{result{9}}
condition {(eq, index_var, 12)} assign{result{6}}condition {(eq, index_var, 13)} assign{result{8}}
condition {(eq, index_var, 14)} assign{result{6}}condition {(eq, index_var, 15)} assign{result{7}}
condition {(eq, index_var, 16)} assign{result{6}}condition {(eq, index_var, 17)} assign{result{4}}
condition {(eq, index_var, 18)} assign{result{6}}condition {(eq, index_var, 19)} assign{result{2}}
condition {(eq, index_var, 20)} assign{result{6}}condition {(eq, index_var, 21)} assign{result{1}}
condition {(eq, index_var, 22)} assign{result{5}}condition {(eq, index_var, 23)} assign{result{5}}
condition {(eq, index_var, 24)} assign{result{4}}condition {(eq, index_var, 25)} assign{result{9}}
condition {(eq, index_var, 26)} assign{result{4}}condition {(eq, index_var, 27)} assign{result{5}}
condition {(eq, index_var, 28)} assign{result{3}}condition {(eq, index_var, 29)} assign{result{9}}
condition {(eq, index_var, 30)} assign{result{3}}condition {(eq, index_var, 31)} assign{result{8}}
condition {(eq, index_var, 32)} assign{result{3}}condition {(eq, index_var, 33)} assign{result{3}}
condition {(eq, index_var, 34)} assign{result{3}}condition {(eq, index_var, 35)} assign{result{2}}
condition {(eq, index_var, 36)} assign{result{2}}condition {(eq, index_var, 37)} assign{result{5}}
condition {(eq, index_var, 38)} assign{result{0}}condition {(eq, index_var, 39)} assign{result{8}}
condition {(eq, index_var, 40)} assign{result{0}}condition {(eq, index_var, 41)} assign{result{4}}
condition {(eq, index_var, 42)} assign{result{0}}condition {(eq, index_var, 43)} assign{result{2}}

	assign{result{0}}
    }
    variable { env obstacle_sizes DEFINE INT static array number_of_obstacles iterative_assign, index_var
	
condition {(eq, index_var, 0)} assign{result{0}}
condition {(eq, index_var, 1)} assign{result{0}}
condition {(eq, index_var, 2)} assign{result{0}}
condition {(eq, index_var, 3)} assign{result{0}}
condition {(eq, index_var, 4)} assign{result{0}}
condition {(eq, index_var, 5)} assign{result{0}}
condition {(eq, index_var, 6)} assign{result{0}}
condition {(eq, index_var, 7)} assign{result{0}}
condition {(eq, index_var, 8)} assign{result{1}}
condition {(eq, index_var, 9)} assign{result{0}}
condition {(eq, index_var, 10)} assign{result{1}}
condition {(eq, index_var, 11)} assign{result{0}}
condition {(eq, index_var, 12)} assign{result{0}}
condition {(eq, index_var, 13)} assign{result{0}}
condition {(eq, index_var, 14)} assign{result{0}}
condition {(eq, index_var, 15)} assign{result{0}}
condition {(eq, index_var, 16)} assign{result{0}}
condition {(eq, index_var, 17)} assign{result{0}}
condition {(eq, index_var, 18)} assign{result{0}}
condition {(eq, index_var, 19)} assign{result{0}}
condition {(eq, index_var, 20)} assign{result{0}}
condition {(eq, index_var, 21)} assign{result{0}}

	assign{result{0}}
    }
} environment_update {
    variable_statement { x_g #{if new, assign value nondeterministcally, else leave unchanged}#
	assign { case {new} result {(loop, loop_var, [min_val, max_val] such_that True, loop_var)}
	    result {x_g}}}
    variable_statement {y_g
	assign {case{new} result {(loop, loop_var, [min_val, max_val] such_that True, loop_var)}
	    result {y_g}}}
    variable_statement {x_d
	assign {
	    case {(eq, act, 'We')} result { (max, min_val, (sub, x_d, 1))}
	    case {(eq, act, 'Ea')} result { (min, max_val, (add, x_d, 1))}
	    result {x_d}}}
    variable_statement {y_d
	assign {
	    case {(eq, act, 'So')} result { (max, min_val, (sub, y_d, 1))}
	    case {(eq, act, 'No')} result { (min, max_val, (add, y_d, 1))}
	    result {y_d}}}	    
} checks {}
environment_checks {
    environment_check { NeedNew
	arguments {} read_variables { x_d, y_d, act}
	condition {(and, (eq, x_g, x_d), (eq, y_g, y_d))}}
} actions {
    action { NewGoal
	arguments{} local_variables {}read_variables {} write_variables {new, act}
	initial_values {}
	update {
	    variable_statement { new assign{result{True}}}
	    variable_statement { act assign{result{'XX'}}}
	    return_statement {result {running}}
	}
    } action {NextAct
	arguments{} local_variables {}read_variables {} write_variables {new, act}
	initial_values {}
	update {
	    variable_statement {new assign{result{False}}}
	    read_environment {
		read_act condition {True}
		variable_statement {act assign {result{net}}}
	    }
	    return_statement {result { success}}
	}
    }
} sub_trees {}
tree {
    composite {Drone selector children {
	    composite { GoalSeq sequence children { NeedNew {} NewGoal {}}}
	    NextAct {}
	}
    }
}
tick_prerequisite {(True)}
specifications {
    INVARSPEC {
	(not,
	    (or,
		(loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
		    (and,
			(lte, x_d, (index, obstacles, constant_index (mult, loop_var, 2))),
			(gte, x_d, (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
			(lte, y_d, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
			(gte, y_d, (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
		    )
		)
	    )
	)
    }
    CTLSPEC {
	(always_globally,
	    (
		(or,
		    (always_finally,
			(and,
			    (eq, x_d at 1, x_g at 0),
			    (eq, y_d at 1, y_g at 0)
			)
		    ),
		    (loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
			(and,
			    (lte, x_g at 0, (index, obstacles, constant_index (mult, loop_var, 2))),
			    (gte, x_g at 0, (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
			    (lte, y_g at 0, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
			    (gte, y_g at 0, (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
			)
		    )
		)
	    )
	)
    }
}